// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws/aws-controllers-k8s/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// KeySpec defines the desired state of Key
type KeySpec struct {
	BypassPolicyLockoutSafetyCheck *bool   `json:"bypassPolicyLockoutSafetyCheck,omitempty"`
	CustomKeyStoreID               *string `json:"customKeyStoreID,omitempty"`
	CustomerMasterKeySpec          *string `json:"customerMasterKeySpec,omitempty"`
	Description                    *string `json:"description,omitempty"`
	KeyUsage                       *string `json:"keyUsage,omitempty"`
	Origin                         *string `json:"origin,omitempty"`
	Policy                         *string `json:"policy,omitempty"`
	Tags                           []*Tag  `json:"tags,omitempty"`
}

// KeyStatus defines the observed state of Key
type KeyStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRS managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	Conditions           []*ackv1alpha1.Condition `json:"conditions"`
	AWSAccountID         *string                  `json:"awsAccountID,omitempty"`
	CloudHsmClusterID    *string                  `json:"cloudHsmClusterID,omitempty"`
	CreationDate         *metav1.Time             `json:"creationDate,omitempty"`
	DeletionDate         *metav1.Time             `json:"deletionDate,omitempty"`
	Enabled              *bool                    `json:"enabled,omitempty"`
	EncryptionAlgorithms []*string                `json:"encryptionAlgorithms,omitempty"`
	ExpirationModel      *string                  `json:"expirationModel,omitempty"`
	KeyID                *string                  `json:"keyID,omitempty"`
	KeyManager           *string                  `json:"keyManager,omitempty"`
	KeyState             *string                  `json:"keyState,omitempty"`
	SigningAlgorithms    []*string                `json:"signingAlgorithms,omitempty"`
	ValidTo              *metav1.Time             `json:"validTo,omitempty"`
}

// Key is the Schema for the Keys API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type Key struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KeySpec   `json:"spec,omitempty"`
	Status            KeyStatus `json:"status,omitempty"`
}

// KeyList contains a list of Key
// +kubebuilder:object:root=true
type KeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Key `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Key{}, &KeyList{})
}
